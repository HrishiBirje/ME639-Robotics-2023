# -*- coding: utf-8 -*-
"""Assignment2_Q3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gVA2fzgBJhvEwtVxz1L78de3rmYms7L6
"""

import numpy as np

def rot_x(theta):
    return np.array([[1, 0, 0, 0],
                     [0, np.cos(theta), -np.sin(theta), 0],
                     [0, np.sin(theta), np.cos(theta), 0],
                     [0, 0, 0, 1]])

def rot_y(theta):
    return np.array([[np.cos(theta), 0, np.sin(theta), 0],
                     [0, 1, 0, 0],
                     [-np.sin(theta), 0, np.cos(theta), 0],
                     [0, 0, 0, 1]])

def rot_z(theta):
    return np.array([[np.cos(theta), -np.sin(theta), 0, 0],
                     [np.sin(theta), np.cos(theta), 0, 0],
                     [0, 0, 1, 0],
                     [0, 0, 0, 1]])

def trans_z(d):
    return np.array([[1, 0, 0, 0],
                     [0, 1, 0, 0],
                     [0, 0, 1, d],
                     [0, 0, 0, 1]])

def trans_y(d):
    return np.array([[1, 0, 0, 0],
                     [0, 1, 0, d],
                     [0, 0, 1, 0],
                     [0, 0, 0, 1]])

def trans_x(d):
    return np.array([[1, 0, 0, d],
                     [0, 1, 0, 0],
                     [0, 0, 1, 0],
                     [0, 0, 0, 1]])

def forward_kinematics(theta1, theta2, d3):
    T01 = rot_z(theta1)
    T12 = rot_z(theta2) @ trans_z(a1)
    T23 = trans_x(a2+d3)
    P3 = trans_x(a3)

    T03 = T01 @ T12 @ T23 @ P3

    return T03[:3, 3]  # Extracting the position vector

# Joint variables
theta1 = np.radians(45)  # Angle in radians
theta2 = np.radians(30)
d3 = 0.2  # Extension

# Link lengths
a1 = 0.1
a2 = 0.15
a3 = 0.1

position = forward_kinematics(theta1, theta2, d3)
print("End Effector Position:", position)